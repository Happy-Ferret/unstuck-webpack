let configWeb = function(names) {
  return `
  /* global __dirname */
  /* generated by unstuck-webpack */

  var path = require('path');
  var webpack = require('webpack');${names.plugins.extract ?
  `\n  var ExtractTextPlugin = require("extract-text-webpack-plugin");` : ''}
  var dir_js = path.resolve(__dirname, '${names.jsdir}');${names.cssdir ?
  `\n  var dir_css = path.resolve(__dirname, '${names.cssdir}');` : ''}
  var dir_build = path.resolve(__dirname, '${names.distdir}');

  module.exports = {
      entry: {
        app : path.resolve(__dirname, 'index.js'),
        vendor : ${names.vendors}
      },
      output: {
          path: dir_build,
          filename: 'bundle.js'
      },
      resolve: {
         modulesDirectories: ['node_modules', dir_js],
      },
      devServer: {
          contentBase: dir_build,
      },${names.isAutoprefix ? `
      postcss: function () {
          return [require('autoprefixer')];
      },` : ''} ${names.devtool ? `
      devtool: '${names.devtool}',` : '' }
      stats: {
          colors: true,
          chunkModules: false
      },
      plugins: [${names.plugins.extract ? `
          new ExtractTextPlugin("[name].css", {  allChunks: true }),` : ''
          } ${names.plugins.chunks ? `
          new webpack.optimize.CommonsChunkPlugin("vendor", "[name].js"),` : ''}
          new webpack.NoErrorsPlugin()
      ],

      module: {
          loaders: [${names.loaders}
          ]${names.isLinter ? `,
          preLoaders: [
            {
              test: /\\.js($|\\?)|\\.jsx($|\\?)/,
              loaders: ['eslint'],
              exclude : [/node_modules/]
            }
          ]` : ''}
      }
  }
  `
}

let configNode = function(names) {
  return `
  /* global __dirname */
  /* generated by unstuck-webpack */

  var path = require('path');
  var webpack = require('webpack');${names.plugins.extract ?
  `\n  var ExtractTextPlugin = require("extract-text-webpack-plugin");` : ''}
  var dir_js = path.resolve(__dirname, '${names.jsdir}');${names.cssdir ?
  `\n  var dir_css = path.resolve(__dirname, '${names.cssdir}');` : ''}
  var dir_build = path.resolve(__dirname, '${names.distdir}');
  var fs = require('fs');

  var nodeModules = {};
  fs.readdirSync('node_modules')
    .filter(function(x) {
      return ['.bin'].indexOf(x) === -1;
    })
    .forEach(function(mod) {
      nodeModules[mod] = 'commonjs ' + mod;
    });

  module.exports = {
      entry: {
        app : path.resolve(dir_js, 'index.js')
      },
      target : 'node',
      output: {
          path: dir_build,
          filename: 'bundle.js'
      },
      externals: nodeModules,
      resolve: {
         modulesDirectories: ['node_modules', dir_js],
      },
      devServer: {
          contentBase: dir_build,
      },${names.isAutoprefix ? `
      postcss: function () {
          return [require('autoprefixer')];
      },` : ''} ${names.devtool ? `
      devtool: '${names.devtool}',` : '' }
      stats: {
          colors: true,
          chunkModules: false
      },
      plugins: [${names.plugins.extract ? `
          new ExtractTextPlugin("[name].css", {  allChunks: true }),` : ''
          } ${names.plugins.chunks ? `
          new webpack.optimize.CommonsChunkPlugin("vendor", "[name].js"),` : ''}
          new webpack.NoErrorsPlugin()
      ],

      module: {
          loaders: [${names.loaders}
          ]${names.isLinter ? `,
          preLoaders: [
            {
              test: /\\.js($|\\?)|\\.jsx($|\\?)/,
              loaders: ['eslint'],
              exclude : [/node_modules/]
            }
          ]` : ''}
      }
  }
  `
}

let createLoader = function(loader, options) {
  if (loader === 'react') {
    return `
            {
                loader: 'babel-loader',
                test: /\\.js($|\\?)|\\.jsx($|\\?)/,
                exclude: /node_modules/,
                presets : ['es2015', 'react']
            }`
  }

  if (loader === 'babel') {
    return `
            {
                loader: 'babel-loader',
                test: /\\.js$/,
                exclude: /node_modules/,
                presets : ['es2015']
            }`
  }

  if (loader === 'vue') {
    return `
            {
                loader: 'vue-loader',
                test: /\\.vue$/,
                exclude: /node_modules/
            }`
  }

  if (loader === 'assets') {
    return `
            {
                loader: 'file?name=${options.dir}[name].[ext]',
                test: /\\.png($|\\?)|\\.woff($|\\?)|\\.woff2($|\\?)|\\.ttf($|\\?)|\\.eot($|\\?)|\\.svg($|\\?)/
            }`
  }

  if (loader === 'html') {
    return `
            {
                loader: 'file?name=${options.dir}[name].html',
                test: /\\.html$/
            }`
  }

  if (loader === 'jade') {
    return `
            {
                loader: 'file?name=${options.dir}[name].html!jade-loader',
                test: /\\.jade$/
            }`
  }

  if (loader === 'markdown') {
    return `
            {
                loader: 'file?name=${options.dir}[name].html!markdown-loader',
                test: /\\.md$/
            }`
  }

  if (loader === 'handlebars') {
    return `
            {
                loader: 'handlebars-loader',
                test: /\\.handlebars$/
            }`
  }

  if (loader === 'less' && options.extract === false) {
    return `
            {
                loader: 'style-loader!css-loader?sourceMap!${options.prefix ? 'postcss-loader!' : ''}less-loader?sourceMap',
                test: /\\.less$/
            }`
  }

  if (loader === 'less' && options.extract === true) {
    return `
            {
                loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!${options.prefix ? 'postcss-loader!' : ''}less-loader?sourceMap'),
                test: /\\.less$/
            }`
  }

  if (loader === 'sass' && options.extract === false) {
    return `
            {
                loader: 'style-loader!css-loader?sourceMap!${options.prefix ? 'postcss-loader!' : ''}sass-loader?sourceMap',
                test: /\\.sass$/
            }`
  }

  if (loader === 'sass' && options.extract === true) {
    return `
            {
                loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!${options.prefix ? 'postcss-loader!' : ''}sass-loader?sourceMap'),
                test: /\\.sass$/
            }`
  }

  if (loader === 'styl' && options.extract === false) {
    return `
            {
                loader: 'style-loader!css-loader?sourceMap!${options.prefix ? 'postcss-loader!' : ''}stylus-loader?sourceMap',
                test: /\\.styl$/
            }`
  }

  if (loader === 'styl' && options.extract === true) {
    return `
            {
                loader: ExtractTextPlugin.extract('style-loader', 'css-loader?sourceMap!${options.prefix ? 'postcss-loader!' : ''}stylus-loader?sourceMap'),
                test: /\\.styl$/
            }`
  }
}


export default function WebpackConfigurator(state) {
  let options = {
    jsdir  : state.config.jsdir,
    cssdir : state.css.enabled ? state.config.cssdir : false,
    vendors : JSON.stringify(state.config.vendors),
    isAutoprefix : state.css.enabled && state.css.autoprefix,
    isLinter : state.js.enabled && state.js.linter,
    devtool : state.js.enabled && state.js.sourceMap !== 'none' ? state.js.sourceMap : false,
    isNode : state.config.template === 'node',
    distdir : 'dist',
    plugins : {},
    loaders : []
  }

  if (state.config.extract.enabled === true) {
    options.plugins.extract = true
  }

  if (state.config.chunks.enabled === true) {
    options.plugins.chunks = true
  }

  if (state.config.assets.enabled === true) {
    options.loaders.push(createLoader('assets', {dir : state.config.assets.dir}))
  }

/* js */
  if (state.js.enabled === true) {
    if (state.js.transpiller.babel === true && state.js.transpiller.react === false) {
      options.loaders.push(createLoader('babel'))
    }

    if (state.js.transpiller.react === true) {
      options.loaders.push(createLoader('react'))
    }

    if (state.js.transpiller.vue === true) {
      options.loaders.push(createLoader('vue'))
    }
  }

/* html */
  if (state.html.enabled === true) {
    if (state.html.templates.html.enabled === true) {
      options.loaders.push(createLoader('html', {dir : state.html.templates.html.target}))
    }

    if (state.html.templates.jade.enabled === true) {
      options.loaders.push(createLoader('jade', {dir : state.html.templates.jade.target}))
    }

    if (state.html.templates.markdown.enabled === true) {
      options.loaders.push(createLoader('markdown', {dir : state.html.templates.markdown.target}))
    }

    if (state.html.templates.handlebars.enabled === true) {
      options.loaders.push(createLoader('handlebars'))
    }
  }

/* css */
  if (state.css.enabled === true) {
    if (state.css.transpiller.less === true) {
      options.loaders.push(createLoader('less',
        {extract : options.plugins.extract, prefix : options.isAutoprefix}))
    }

    if (state.css.transpiller.sass === true) {
      options.loaders.push(createLoader('sass',
        {extract : options.plugins.extract, prefix : options.isAutoprefix}))
    }

    if (state.css.transpiller.styl === true) {
      options.loaders.push(createLoader('styl',
        {extract : options.plugins.extract, prefix : options.isAutoprefix}))
    }
  }

  return options.isNode ? configNode(options) : configWeb(options)
}
